# This is a basic workflow to help you get started with Actions

name: chocolatine

# Controls when the workflow will run
on:
  push:
    branches: main
    paths-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches: main
    paths-ignore:
      - 'ga-ignore-*'

env:
  EXECUTABLES: "make_test,lol"

jobs:
  check_coding_style:
    if: ${{ github.workspace != vars.MIRROR_URL }}
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Coding-style
        run: |
            check.sh $(pwd) $(pwd)
            cs="coding-style-reports.log"
            while IFS=":" read -r filepath errline errtype errcode; do
              echo "::error title=$errtype coding style error,file=$filepath,line=$errline::$errcode"
            done < $cs
            if [ -s $cs ]; then
              exit 1
            fi

  check_program_compilation:
    if: ${{ github.workspace != vars.MIRROR_URL }}
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: make
        timeout-minutes: 2
      - run: make clean
      - name: Check executables
        run: |
            IFS=','
            read -ra exec <<< ${{ env.EXECUTABLES }}
            for file in $exec; do
              echo $file
              if [ ! -x $file ]; then
                exit 1
              fi
            done

  run_tests:
    if: ${{ github.workspace != vars.MIRROR_URL }}
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: make tests_run
        timeout-minutes: 2
      - name: Exit
        run: exit $?

  push_to_mirror:
    if: ${{ github.workspace != vars.MIRROR_URL && github.event_name == 'push'}}
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ vars.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
